// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.toBe() fails for '1n' with '.not' 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: not <green>1n</>"
`;

exports[`.toBe() fails for: 1n and 2n 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>

Expected: <green>2n</>
Received: <red>1n</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '1n' is defined 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

Received: <red>1n</>"
`;

exports[`.toBeDefined(), .toBeUndefined() '1n' is defined 2`] = `
"<dim>expect(</><red>received</><dim>).</>toBeUndefined<dim>()</>

Received: <red>1n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1, 1] 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>1n</>
Received:        <red>1n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() equal numbers: [1, 1] 2`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>1n</>
Received:        <red>1n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: > <green>2n</>
Received:   <red>1n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 2`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: not < <green>2n</>
Received:       <red>1n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 3`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThan<dim>(</><green>expected</><dim>)</>

Expected: not > <green>1n</>
Received:       <red>2n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 4`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThan<dim>(</><green>expected</><dim>)</>

Expected: < <green>1n</>
Received:   <red>2n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 5`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: >= <green>2n</>
Received:    <red>1n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 6`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not <= <green>2n</>
Received:        <red>1n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 7`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: not >= <green>1n</>
Received:        <red>2n</>"
`;

exports[`.toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual() throws: [1, 2] 8`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqual<dim>(</><green>expected</><dim>)</>

Expected: <= <green>1n</>
Received:    <red>2n</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0n' is falsy 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeTruthy<dim>()</>

Received: <red>0n</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '0n' is falsy 2`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeFalsy<dim>()</>

Received: <red>0n</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '1n' is truthy 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeTruthy<dim>()</>

Received: <red>1n</>"
`;

exports[`.toBeTruthy(), .toBeFalsy() '1n' is truthy 2`] = `
"<dim>expect(</><red>received</><dim>).</>toBeFalsy<dim>()</>

Received: <red>1n</>"
`;

exports[`.toEqual() {pass: false} expect(1n).toEqual(2n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: <green>2n</>
Received: <red>1n</>"
`;

exports[`.toEqual() {pass: true} expect(1n).not.toEqual(1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>1n</>
"
`;

exports[`.toStrictEqual() matches the expected snapshot when it fails 1`] = `
"<dim>expect(</><red>received</><dim>).</>toStrictEqual<dim>(</><green>expected</><dim>) // deep equality</>

<green>- Expected</>
<red>+ Received</>

<dim>  Object {</>
<green>-   \\"test\\": TestClassA {</>
<green>-     \\"a\\": 1n,</>
<green>-     \\"b\\": 2n,</>
<green>-   },</>
<red>+   \\"test\\": 2n,</>
<dim>  }</>"
`;

exports[`.toStrictEqual() matches the expected snapshot when it fails 2`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toStrictEqual<dim>(</><green>expected</><dim>) // deep equality</>

Expected: not <green>{\\"test\\": {\\"a\\": 1n, \\"b\\": 2n}}</>
"
`;
